// Code generated by thriftrw-plugin-yarpc
// @generated

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package keyvalueclient

import (
	context "context"
	fmt "fmt"
	wire "go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc"
	encoding "go.uber.org/yarpc/api/encoding"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	kv "go.uber.org/yarpc/internal/examples/thrift-keyvalue/keyvalue/kv"
	encoding2 "go.uber.org/yarpc/pkg/encoding"
	procedure "go.uber.org/yarpc/pkg/procedure"
	reflect "reflect"
)

// Interface is a client for the KeyValue service.
type Interface interface {
	GetValue(
		ctx context.Context,
		Key *string,
		opts ...yarpc.CallOption,
	) (string, error)

	SetValue(
		ctx context.Context,
		Key *string,
		Value *string,
		opts ...yarpc.CallOption,
	) error
}

// New builds a new client for the KeyValue service.
//
// 	client := keyvalueclient.New(dispatcher.ClientConfig("keyvalue"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "KeyValue",
			ClientConfig: c,
		}, opts...),
		adapterProvider: encoding.NopAdapterProvider,
	}
}

// Config is a forwards compatible configuration struct for the KeyValue service.
type Config struct {
	AdapterProvider encoding.AdapterProvider
}

// NewFromConfig builds a new client for the KeyValue service.
func NewFromConfig(cc transport.ClientConfig, cfg Config, opts ...thrift.ClientOption) (Interface, error) {
	const thriftService = "KeyValue"

	thriftClient := thrift.New(thrift.Config{
		Service:      thriftService,
		ClientConfig: cc,
	}, opts...)

	if cfg.AdapterProvider == nil {
		cfg.AdapterProvider = encoding.NopAdapterProvider
	}
	adapterClient, err := encoding2.NewAdapterClient(
		encoding2.AdapterClientConfig{
			ClientConfig: cc,
		},
	)
	if err != nil {
		return nil, err
	}

	return client{
		c:             thriftClient,
		adapterClient: adapterClient,

		thriftService:   thriftService,
		cc:              cc,
		adapterProvider: cfg.AdapterProvider,
	}, nil
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	c               thrift.Client
	adapterClient   encoding2.AdapterClient
	thriftService   string
	cc              transport.ClientConfig
	adapterProvider encoding.AdapterProvider
}

func (c client) GetValue(
	ctx context.Context,
	_Key *string,
	opts ...yarpc.CallOption,
) (success string, err error) {

	args := kv.KeyValue_GetValue_Helper.Args(_Key)
	procedureName := procedure.ToName(c.thriftService, args.MethodName())

	var result kv.KeyValue_GetValue_Result

	if adapter, ok := c.adapterProvider.Adapter(procedureName); ok {
		tReq := &transport.Request{
			Caller:    c.cc.Caller(),
			Service:   c.cc.Service(),
			Encoding:  thrift.Encoding,
			Procedure: procedureName,
		}
		res, err := c.adapterClient.Call(ctx, tReq, args, adapter, opts...)
		if err != nil {
			return success, err
		}

		var ok bool
		result, ok = res.(kv.KeyValue_GetValue_Result)
		if !ok {
			return success, fmt.Errorf("thrift adapter returned invalid type for procedure, expected 'kv.KeyValue_GetValue_Result', got '%T'", res)
		}

	} else {

		var body wire.Value
		body, err = c.c.Call(ctx, args, opts...)
		if err != nil {
			return
		}

		if err = result.FromWire(body); err != nil {
			return
		}
	}

	success, err = kv.KeyValue_GetValue_Helper.UnwrapResponse(&result)
	return
}

func (c client) SetValue(
	ctx context.Context,
	_Key *string,
	_Value *string,
	opts ...yarpc.CallOption,
) (err error) {

	args := kv.KeyValue_SetValue_Helper.Args(_Key, _Value)
	procedureName := procedure.ToName(c.thriftService, args.MethodName())

	var result kv.KeyValue_SetValue_Result

	if adapter, ok := c.adapterProvider.Adapter(procedureName); ok {
		tReq := &transport.Request{
			Caller:    c.cc.Caller(),
			Service:   c.cc.Service(),
			Encoding:  thrift.Encoding,
			Procedure: procedureName,
		}
		res, err := c.adapterClient.Call(ctx, tReq, args, adapter, opts...)
		if err != nil {
			return err
		}

		var ok bool
		result, ok = res.(kv.KeyValue_SetValue_Result)
		if !ok {
			return fmt.Errorf("thrift adapter returned invalid type for procedure, expected 'kv.KeyValue_SetValue_Result', got '%T'", res)
		}

	} else {

		var body wire.Value
		body, err = c.c.Call(ctx, args, opts...)
		if err != nil {
			return
		}

		if err = result.FromWire(body); err != nil {
			return
		}
	}

	err = kv.KeyValue_SetValue_Helper.UnwrapResponse(&result)
	return
}
