// Code generated by thriftrw-plugin-yarpc
// @generated

package nameclient

import (
	context "context"
	fmt "fmt"
	wire "go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc"
	encoding "go.uber.org/yarpc/api/encoding"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	extends "go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/extends"
	encoding2 "go.uber.org/yarpc/pkg/encoding"
	procedure "go.uber.org/yarpc/pkg/procedure"
	reflect "reflect"
)

// Interface is a client for the Name service.
type Interface interface {
	Name(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (string, error)
}

// New builds a new client for the Name service.
//
// 	client := nameclient.New(dispatcher.ClientConfig("name"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "Name",
			ClientConfig: c,
		}, opts...),
		adapterProvider: encoding.NopAdapterProvider,
	}
}

// Config is a forwards compatible configuration struct for the Name service.
type Config struct {
	AdapterProvider encoding.AdapterProvider
}

// NewFromConfig builds a new client for the Name service.
func NewFromConfig(cc transport.ClientConfig, cfg Config, opts ...thrift.ClientOption) (Interface, error) {
	const thriftService = "Name"

	thriftClient := thrift.New(thrift.Config{
		Service:      thriftService,
		ClientConfig: cc,
	}, opts...)

	if cfg.AdapterProvider == nil {
		cfg.AdapterProvider = encoding.NopAdapterProvider
	}
	adapterClient, err := encoding2.NewAdapterClient(
		encoding2.AdapterClientConfig{
			ClientConfig: cc,
		},
	)
	if err != nil {
		return nil, err
	}

	return client{
		c:             thriftClient,
		adapterClient: adapterClient,

		thriftService:   thriftService,
		cc:              cc,
		adapterProvider: cfg.AdapterProvider,
	}, nil
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	c               thrift.Client
	adapterClient   encoding2.AdapterClient
	thriftService   string
	cc              transport.ClientConfig
	adapterProvider encoding.AdapterProvider
}

func (c client) Name(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success string, err error) {

	args := extends.Name_Name_Helper.Args()
	procedureName := procedure.ToName(c.thriftService, args.MethodName())

	var result extends.Name_Name_Result

	if adapter, ok := c.adapterProvider.Adapter(procedureName); ok {
		tReq := &transport.Request{
			Caller:    c.cc.Caller(),
			Service:   c.cc.Service(),
			Encoding:  thrift.Encoding,
			Procedure: procedureName,
		}
		res, err := c.adapterClient.Call(ctx, tReq, args, adapter, opts...)
		if err != nil {
			return success, err
		}

		var ok bool
		result, ok = res.(extends.Name_Name_Result)
		if !ok {
			return success, fmt.Errorf("thrift adapter returned invalid type for procedure, expected 'extends.Name_Name_Result', got '%T'", res)
		}

	} else {

		var body wire.Value
		body, err = c.c.Call(ctx, args, opts...)
		if err != nil {
			return
		}

		if err = result.FromWire(body); err != nil {
			return
		}
	}

	success, err = extends.Name_Name_Helper.UnwrapResponse(&result)
	return
}
